{"ast":null,"code":"var _jsxFileName = \"/Users/blues/CodersLab/Projects/BoozeCounter/src/Recipe.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Modal from 'react-modal';\nimport { RecipeDetails } from \"./RecipeDetails\";\nimport { Ingridient } from \"./models/Ingridient\";\nimport { Recipe as RecipeModel } from \"./models/Recipe\"; //uuid\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:3000';\n\nconst Recipe = () => {\n  _s();\n\n  const [recipes, setRecipes] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [openedRecipe, setOpenedRecipe] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [process, setProcess] = useState(\"\"); // const [ingName, setIngName] = useState(\"\");\n  // const [ingValue, setIngValue] = useState();\n\n  const [ingredients, setIngredients] = useState([new Ingridient(\"\", \"\")]);\n  const [ingredientsValue, setIngredientsValue] = useState([]);\n  const [newRecipeModalIsOpen, setNewRecipeModalIsOpen] = React.useState(false);\n  const [recipeModalIsOpen, setRecipeModalIsOpen] = React.useState(false);\n  useEffect(() => {\n    setLoading(true);\n    fetch(`${API_URL}/recipes`).then(response => response.json()).then(data => {\n      setRecipes(data);\n      setLoading(false);\n    });\n  }, []); // const deleteRecipe = (openedRecipe.id) => {\n  //     setLoading(true);\n  //     fetch(`${API_URL}/recipes/${openedRecipe.id}`, { method: 'DELETE' })\n  //         .then((response) => response.json())\n  //         .then(() => {\n  //             setRecipes((prevState) => prevState.filter((recipe) => recipe.id !== id));\n  //             setLoading(false);\n  //         });\n  // };\n\n  const recipe = ingredientsValue.reduce(function (recipe, field, index) {\n    recipe[ingredients[index]] = field;\n    return recipe;\n  }, {});\n\n  const addNewRecipe = () => {\n    const recipe = new RecipeModel(name, ingredients, process);\n    fetch(`${API_URL}/recipes`, {\n      method: 'POST',\n      body: JSON.stringify(recipe),\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(resp => resp.json()).then(newRecipe => {\n      console.log(newRecipe);\n      recipe.setId(newRecipe.id);\n      setRecipes(prevState => [...prevState, recipe]);\n    });\n  };\n\n  console.log(recipes);\n\n  const handleClickIng = e => {\n    e.preventDefault();\n    const ingridient = new Ingridient(\"\", \"\");\n    setIngredients(prevState => [...prevState, ingridient]);\n  };\n\n  function openNewModal() {\n    setNewRecipeModalIsOpen(true);\n  }\n\n  function closeNewModal(e) {\n    e.preventDefault();\n    addNewRecipe();\n    setNewRecipeModalIsOpen(false);\n  }\n\n  function openModal(recipe) {\n    setOpenedRecipe(recipe);\n    setRecipeModalIsOpen(true);\n  }\n\n  function closeModal(close) {\n    setRecipeModalIsOpen(false);\n  }\n\n  const updateIngredientName = (index, newName) => {\n    const updatedIngredients = [...ingredients];\n    updatedIngredients[index].name = newName;\n    setIngredients(updatedIngredients);\n  };\n\n  const updateIngredientValue = (index, newQuantity) => {\n    const updatedIngredients = [...ingredients];\n    updatedIngredients[index].quantity = newQuantity;\n    setIngredients(updatedIngredients);\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Trwa \\u0142adowanie...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 25\n  }, this);\n  if (recipe.length === 0) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recipe\",\n        onClick: openNewModal,\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Add New\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), recipes.map(recipe => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recipe\",\n        onClick: () => openModal(recipe),\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: recipe.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)\n      }, recipe.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: recipeModalIsOpen,\n        onRequestClose: closeModal,\n        ariaHideApp: false,\n        children: /*#__PURE__*/_jsxDEV(RecipeDetails, {\n          recipes: recipes,\n          recipe: openedRecipe,\n          open: recipeModalIsOpen,\n          close: closeModal,\n          deleteRecipe: deleteRecipe\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: newRecipeModalIsOpen,\n        onRequestClose: closeNewModal,\n        ariaHideApp: false,\n        children: /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"form\",\n            onSubmit: closeNewModal,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"new-recipe-title\",\n              placeholder: 'Drink Name',\n              onChange: e => setName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), ingredients.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: 'new-ing-div',\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"new-recipe-title\",\n                placeholder: `ingredient ${index + 1}`,\n                onChange: e => updateIngredientName(index, e.target.value),\n                value: ingredients[index].name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: 'number',\n                className: \"new-recipe-title\",\n                placeholder: \"quantity\",\n                onChange: e => updateIngredientValue(index, e.target.value),\n                value: ingredients[index].quantity\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 33\n            }, this)), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"new-recipe-title\",\n              onChange: e => setProcess(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button\",\n              onClick: handleClickIng,\n              children: \"Add ingredient\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button\",\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Recipe, \"ZJJelzsteY0yDWmNwO4Zj7bPEEM=\");\n\n_c = Recipe;\nexport { Recipe }; // check on click for recipe to prevent refreshiing\n\nvar _c;\n\n$RefreshReg$(_c, \"Recipe\");","map":{"version":3,"sources":["/Users/blues/CodersLab/Projects/BoozeCounter/src/Recipe.js"],"names":["React","useEffect","useState","Modal","RecipeDetails","Ingridient","Recipe","RecipeModel","API_URL","recipes","setRecipes","loading","setLoading","openedRecipe","setOpenedRecipe","name","setName","process","setProcess","ingredients","setIngredients","ingredientsValue","setIngredientsValue","newRecipeModalIsOpen","setNewRecipeModalIsOpen","recipeModalIsOpen","setRecipeModalIsOpen","fetch","then","response","json","data","recipe","reduce","field","index","addNewRecipe","method","body","JSON","stringify","headers","resp","newRecipe","console","log","setId","id","prevState","handleClickIng","e","preventDefault","ingridient","openNewModal","closeNewModal","openModal","closeModal","close","updateIngredientName","newName","updatedIngredients","updateIngredientValue","newQuantity","quantity","length","map","deleteRecipe","target","value","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAAQC,UAAR,QAAyB,qBAAzB;AACA,SAAQC,MAAM,IAAIC,WAAlB,QAAoC,iBAApC,C,CACA;;;;AAEA,MAAMC,OAAO,GAAG,uBAAhB;;AAEA,MAAMF,MAAM,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,EAAD,CAAtC,CALiB,CAMjB;AACA;;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,CAAC,IAAIG,UAAJ,CAAe,EAAf,EAAkB,EAAlB,CAAD,CAAD,CAA9C;AACA,QAAM,CAACgB,gBAAD,EAAmBC,mBAAnB,IAA0CpB,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACqB,oBAAD,EAAuBC,uBAAvB,IAAkDxB,KAAK,CAACE,QAAN,CAAe,KAAf,CAAxD;AACA,QAAM,CAACuB,iBAAD,EAAoBC,oBAApB,IAA4C1B,KAAK,CAACE,QAAN,CAAe,KAAf,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAe,IAAAA,KAAK,CAAE,GAAEnB,OAAQ,UAAZ,CAAL,CACKoB,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EAEKF,IAFL,CAEWG,IAAD,IAAU;AACZrB,MAAAA,UAAU,CAACqB,IAAD,CAAV;AACAnB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KALL;AAMH,GARQ,EAQN,EARM,CAAT,CAbiB,CAsBjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMoB,MAAM,GAAIX,gBAAgB,CAACY,MAAjB,CAAwB,UAASD,MAAT,EAAiBE,KAAjB,EAAwBC,KAAxB,EAA+B;AACnEH,IAAAA,MAAM,CAACb,WAAW,CAACgB,KAAD,CAAZ,CAAN,GAA6BD,KAA7B;AACA,WAAOF,MAAP;AACH,GAHe,EAGb,EAHa,CAAhB;;AAIA,QAAMI,YAAY,GAAG,MAAM;AACvB,UAAMJ,MAAM,GAAG,IAAIzB,WAAJ,CAAiBQ,IAAjB,EAAuBI,WAAvB,EAAoCF,OAApC,CAAf;AACAU,IAAAA,KAAK,CAAE,GAAEnB,OAAQ,UAAZ,EAAuB;AACxB6B,MAAAA,MAAM,EAAE,MADgB;AAExBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,MAAf,CAFkB;AAGxBS,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHe,KAAvB,CAAL,CAOKb,IAPL,CAOWc,IAAD,IAAUA,IAAI,CAACZ,IAAL,EAPpB,EAQKF,IARL,CAQWe,SAAD,IAAe;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAX,MAAAA,MAAM,CAACc,KAAP,CAAaH,SAAS,CAACI,EAAvB;AACArC,MAAAA,UAAU,CAAEsC,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAehB,MAAf,CAAhB,CAAV;AACH,KAZL;AAaH,GAfD;;AAgBAY,EAAAA,OAAO,CAACC,GAAR,CAAYpC,OAAZ;;AACA,QAAMwC,cAAc,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,UAAU,GAAG,IAAI/C,UAAJ,CAAe,EAAf,EAAmB,EAAnB,CAAnB;AACAe,IAAAA,cAAc,CAAE4B,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAeI,UAAf,CAAf,CAAd;AACH,GAJD;;AAKA,WAASC,YAAT,GAAwB;AACpB7B,IAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACH;;AAED,WAAS8B,aAAT,CAAuBJ,CAAvB,EAA0B;AACtBA,IAAAA,CAAC,CAACC,cAAF;AACAf,IAAAA,YAAY;AACZZ,IAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACH;;AACD,WAAS+B,SAAT,CAAmBvB,MAAnB,EAA2B;AACvBlB,IAAAA,eAAe,CAACkB,MAAD,CAAf;AACAN,IAAAA,oBAAoB,CAAC,IAAD,CAApB;AACH;;AACD,WAAS8B,UAAT,CAAoBC,KAApB,EAA2B;AACvB/B,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACH;;AACD,QAAMgC,oBAAoB,GAAG,CAACvB,KAAD,EAAQwB,OAAR,KAAoB;AAC7C,UAAMC,kBAAkB,GAAG,CAAC,GAAGzC,WAAJ,CAA3B;AACAyC,IAAAA,kBAAkB,CAACzB,KAAD,CAAlB,CAA0BpB,IAA1B,GAA+B4C,OAA/B;AACAvC,IAAAA,cAAc,CAACwC,kBAAD,CAAd;AACH,GAJD;;AAKA,QAAMC,qBAAqB,GAAG,CAAC1B,KAAD,EAAQ2B,WAAR,KAAuB;AACjD,UAAMF,kBAAkB,GAAG,CAAC,GAAGzC,WAAJ,CAA3B;AACAyC,IAAAA,kBAAkB,CAACzB,KAAD,CAAlB,CAA0B4B,QAA1B,GAAoCD,WAApC;AACA1C,IAAAA,cAAc,CAACwC,kBAAD,CAAd;AACH,GAJD;;AAMA,MAAIjD,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIqB,MAAM,CAACgC,MAAP,KAAkB,CAAtB,EAAyB,OAAO,IAAP;AACzB,sBACI;AAAA,2BACI;AAAS,MAAA,SAAS,EAAE,WAApB;AAAA,8BACI;AAAK,QAAA,SAAS,EAAE,QAAhB;AAA0B,QAAA,OAAO,EAAEX,YAAnC;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,EAIK5C,OAAO,CAACwD,GAAR,CAAajC,MAAD,iBACT;AAAqB,QAAA,SAAS,EAAE,QAAhC;AAA0C,QAAA,OAAO,EAAG,MAAMuB,SAAS,CAACvB,MAAD,CAAnE;AAAA,+BACI;AAAA,oBAAKA,MAAM,CAACjB;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ,SAAUiB,MAAM,CAACe,EAAjB;AAAA;AAAA;AAAA;AAAA,cADH,CAJL,eASI,QAAC,KAAD;AACI,QAAA,MAAM,EAAEtB,iBADZ;AAEI,QAAA,cAAc,EAAE+B,UAFpB;AAGI,QAAA,WAAW,EAAE,KAHjB;AAAA,+BAKI,QAAC,aAAD;AAAe,UAAA,OAAO,EAAE/C,OAAxB;AAAiC,UAAA,MAAM,EAAEI,YAAzC;AAAuD,UAAA,IAAI,EAAEY,iBAA7D;AAAgF,UAAA,KAAK,EAAE+B,UAAvF;AAAmG,UAAA,YAAY,EAAEU;AAAjH;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,cATJ,eAgBI,QAAC,KAAD;AACI,QAAA,MAAM,EAAE3C,oBADZ;AAEI,QAAA,cAAc,EAAE+B,aAFpB;AAGI,QAAA,WAAW,EAAE,KAHjB;AAAA,+BAKI;AAAS,UAAA,SAAS,EAAE,WAApB;AAAA,iCACI;AAAM,YAAA,SAAS,EAAE,MAAjB;AAAyB,YAAA,QAAQ,EAAEA,aAAnC;AAAA,oCACI;AAAO,cAAA,SAAS,EAAE,kBAAlB;AAAsC,cAAA,WAAW,EAAE,YAAnD;AAAiE,cAAA,QAAQ,EAAEJ,CAAC,IAAIlC,OAAO,CAACkC,CAAC,CAACiB,MAAF,CAASC,KAAV;AAAvF;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEKjD,WAAW,CAAC8C,GAAZ,CAAgB,CAACI,IAAD,EAAMlC,KAAN,kBACb;AAAiB,cAAA,SAAS,EAAE,aAA5B;AAAA,sCACI;AAAQ,gBAAA,SAAS,EAAE,kBAAnB;AACQ,gBAAA,WAAW,EAAG,cAAaA,KAAK,GAAC,CAAE,EAD3C;AAEQ,gBAAA,QAAQ,EAAEe,CAAC,IAAIQ,oBAAoB,CAACvB,KAAD,EAAOe,CAAC,CAACiB,MAAF,CAASC,KAAhB,CAF3C;AAGQ,gBAAA,KAAK,EAAEjD,WAAW,CAACgB,KAAD,CAAX,CAAmBpB;AAHlC;AAAA;AAAA;AAAA;AAAA,sBADJ,eAMI;AAAO,gBAAA,IAAI,EAAE,QAAb;AAAuB,gBAAA,SAAS,EAAE,kBAAlC;AACO,gBAAA,WAAW,EAAE,UADpB;AAEO,gBAAA,QAAQ,EAAEmC,CAAC,IAAIW,qBAAqB,CAAC1B,KAAD,EAAOe,CAAC,CAACiB,MAAF,CAASC,KAAhB,CAF3C;AAGO,gBAAA,KAAK,EAAEjD,WAAW,CAACgB,KAAD,CAAX,CAAmB4B;AAHjC;AAAA;AAAA;AAAA;AAAA,sBANJ;AAAA,eAAU5B,KAAV;AAAA;AAAA;AAAA;AAAA,oBADH,CAFL,eAgBI;AAAU,cAAA,SAAS,EAAE,kBAArB;AAAyC,cAAA,QAAQ,EAAEe,CAAC,IAAIhC,UAAU,CAACgC,CAAC,CAACiB,MAAF,CAASC,KAAV;AAAlE;AAAA;AAAA;AAAA;AAAA,oBAhBJ,eAiBI;AAAQ,cAAA,SAAS,EAAE,QAAnB;AAA6B,cAAA,OAAO,EAAEnB,cAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAjBJ,eAkBI;AAAQ,cAAA,SAAS,EAAE,QAAnB;AAA6B,cAAA,IAAI,EAAE,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAkDH,CAxID;;GAAM3C,M;;KAAAA,M;AA0IN,SAASA,MAAT,G,CAEA","sourcesContent":["import React, {useEffect, useState,} from 'react';\nimport Modal from 'react-modal';\nimport {RecipeDetails} from \"./RecipeDetails\";\nimport {Ingridient} from \"./models/Ingridient\";\nimport {Recipe as RecipeModel} from \"./models/Recipe\"\n//uuid\n\nconst API_URL = 'http://localhost:3000';\n\nconst Recipe = () => {\n    const [recipes, setRecipes] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [openedRecipe, setOpenedRecipe] = useState(null);\n    const [name, setName] = useState(\"\");\n    const [process, setProcess] = useState(\"\");\n    // const [ingName, setIngName] = useState(\"\");\n    // const [ingValue, setIngValue] = useState();\n    const [ingredients, setIngredients] = useState([new Ingridient(\"\",\"\")]);\n    const [ingredientsValue, setIngredientsValue] = useState([]);\n    const [newRecipeModalIsOpen, setNewRecipeModalIsOpen] = React.useState(false);\n    const [recipeModalIsOpen, setRecipeModalIsOpen] = React.useState(false);\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(`${API_URL}/recipes`)\n            .then((response) => response.json())\n            .then((data) => {\n                setRecipes(data);\n                setLoading(false);\n            });\n    }, []);\n    // const deleteRecipe = (openedRecipe.id) => {\n    //     setLoading(true);\n    //     fetch(`${API_URL}/recipes/${openedRecipe.id}`, { method: 'DELETE' })\n    //         .then((response) => response.json())\n    //         .then(() => {\n    //             setRecipes((prevState) => prevState.filter((recipe) => recipe.id !== id));\n    //             setLoading(false);\n    //         });\n    // };\n    const recipe =  ingredientsValue.reduce(function(recipe, field, index) {\n        recipe[ingredients[index]] = field;\n        return recipe;\n    }, {})\n    const addNewRecipe = () => {\n        const recipe = new RecipeModel( name, ingredients, process);\n        fetch(`${API_URL}/recipes`, {\n            method: 'POST',\n            body: JSON.stringify(recipe),\n            headers: {\n                'Content-type': 'application/json',\n            },\n        })\n            .then((resp) => resp.json())\n            .then((newRecipe) => {\n                console.log(newRecipe);\n                recipe.setId(newRecipe.id)\n                setRecipes((prevState) => [...prevState, recipe]);\n            });\n    };\n    console.log(recipes)\n    const handleClickIng = (e) => {\n        e.preventDefault()\n        const ingridient = new Ingridient(\"\", \"\");\n        setIngredients( prevState => [...prevState, ingridient]);\n    }\n    function openNewModal() {\n        setNewRecipeModalIsOpen(true);\n    }\n\n    function closeNewModal(e) {\n        e.preventDefault()\n        addNewRecipe();\n        setNewRecipeModalIsOpen(false);\n    }\n    function openModal(recipe) {\n        setOpenedRecipe(recipe);\n        setRecipeModalIsOpen(true);\n    }\n    function closeModal(close) {\n        setRecipeModalIsOpen(false);\n    }\n    const updateIngredientName = (index, newName) => {\n        const updatedIngredients = [...ingredients];\n        updatedIngredients[index].name=newName;\n        setIngredients(updatedIngredients)\n    }\n    const updateIngredientValue = (index, newQuantity) =>{\n        const updatedIngredients = [...ingredients];\n        updatedIngredients[index].quantity= newQuantity;\n        setIngredients(updatedIngredients);\n    }\n\n    if (loading) return <p>Trwa ładowanie...</p>;\n    if (recipe.length === 0) return null;\n    return (\n        <>\n            <section className={\"container\"}>\n                <div className={\"recipe\"} onClick={openNewModal}>\n                    <h1>Add New</h1>\n                </div>\n                {recipes.map((recipe) => (\n                    <div key={recipe.id} className={\"recipe\"} onClick={ () => openModal(recipe)}>\n                        <h2>{recipe.name}</h2>\n                    </div>\n                ))}\n                <Modal\n                    isOpen={recipeModalIsOpen}\n                    onRequestClose={closeModal}\n                    ariaHideApp={false}\n                >\n                    <RecipeDetails recipes={recipes} recipe={openedRecipe} open={recipeModalIsOpen} close={closeModal} deleteRecipe={deleteRecipe}/>\n                </Modal>\n                <Modal\n                    isOpen={newRecipeModalIsOpen}\n                    onRequestClose={closeNewModal}\n                    ariaHideApp={false}\n                >\n                    <section className={\"container\"}>\n                        <form className={\"form\"} onSubmit={closeNewModal}>\n                            <input className={\"new-recipe-title\"} placeholder={'Drink Name'} onChange={e => setName(e.target.value)}/>\n                            {ingredients.map((item,index)=>(\n                                <div key={index} className={'new-ing-div'}>\n                                    <input  className={\"new-recipe-title\"}\n                                            placeholder={`ingredient ${index+1}`}\n                                            onChange={e => updateIngredientName(index,e.target.value)}\n                                            value={ingredients[index].name}\n                                    />\n                                    <input type={'number'} className={\"new-recipe-title\"}\n                                           placeholder={\"quantity\"}\n                                           onChange={e => updateIngredientValue(index,e.target.value)}\n                                           value={ingredients[index].quantity}\n                                    />\n                                </div>\n                            ))}\n                            <textarea className={\"new-recipe-title\"} onChange={e => setProcess(e.target.value)}/>\n                            <button className={\"button\"} onClick={handleClickIng}>Add ingredient</button>\n                            <button className={\"button\"} type={\"submit\"}>Save</button>\n\n                        </form>\n                    </section>\n                </Modal>\n            </section>\n        </>\n    );\n}\n\nexport { Recipe };\n\n// check on click for recipe to prevent refreshiing"]},"metadata":{},"sourceType":"module"}