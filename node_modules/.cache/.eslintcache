[{"/Users/blues/Dyplom/my-app/src/index.js":"1","/Users/blues/Dyplom/my-app/src/App.js":"2","/Users/blues/Dyplom/my-app/src/reportWebVitals.js":"3","/Users/blues/Dyplom/my-app/src/Recipe.js":"4","/Users/blues/Dyplom/my-app/src/RecipeDetails.js":"5","/Users/blues/CodersLab/Projects/BoozeCounter/src/index.js":"6","/Users/blues/CodersLab/Projects/BoozeCounter/src/App.js":"7","/Users/blues/CodersLab/Projects/BoozeCounter/src/reportWebVitals.js":"8","/Users/blues/CodersLab/Projects/BoozeCounter/src/Recipe.js":"9","/Users/blues/CodersLab/Projects/BoozeCounter/src/RecipeDetails.js":"10","/Users/blues/CodersLab/Projects/BoozeCounter/src/models/Recipe.js":"11","/Users/blues/CodersLab/Projects/BoozeCounter/src/models/ingredient.js":"12","/Users/blues/CodersLab/Projects/BoozeCounter/src/models/glass.js":"13","/Users/blues/CodersLab/Projects/BoozeCounter/src/AddGlassBar.js":"14"},{"size":500,"mtime":1646064369212,"results":"15","hashOfConfig":"16"},{"size":142,"mtime":1646319250551,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1646061424277,"results":"18","hashOfConfig":"16"},{"size":5758,"mtime":1646319197467,"results":"19","hashOfConfig":"16"},{"size":1556,"mtime":1646320135370,"results":"20","hashOfConfig":"16"},{"size":500,"mtime":1646064369212,"results":"21","hashOfConfig":"22"},{"size":142,"mtime":1646319250551,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1646061424277,"results":"24","hashOfConfig":"22"},{"size":11430,"mtime":1647269731879,"results":"25","hashOfConfig":"22"},{"size":3361,"mtime":1646897850653,"results":"26","hashOfConfig":"22"},{"size":323,"mtime":1646333189604,"results":"27","hashOfConfig":"22"},{"size":126,"mtime":1646333107913,"results":"28","hashOfConfig":"22"},{"size":193,"mtime":1646839653527,"results":"29","hashOfConfig":"22"},{"size":1592,"mtime":1647270421018,"results":"30","hashOfConfig":"22"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"dvyfsx",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"kku58e",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/blues/Dyplom/my-app/src/index.js",[],[],["77","78"],"/Users/blues/Dyplom/my-app/src/App.js",[],[],"/Users/blues/Dyplom/my-app/src/reportWebVitals.js",[],[],"/Users/blues/Dyplom/my-app/src/Recipe.js",[],[],"/Users/blues/Dyplom/my-app/src/RecipeDetails.js",[],[],"/Users/blues/CodersLab/Projects/BoozeCounter/src/index.js",[],[],["79","80"],"/Users/blues/CodersLab/Projects/BoozeCounter/src/App.js",[],[],"/Users/blues/CodersLab/Projects/BoozeCounter/src/reportWebVitals.js",[],[],"/Users/blues/CodersLab/Projects/BoozeCounter/src/Recipe.js",["81"],[],"import React, {useEffect, useState,} from 'react';\nimport Modal from 'react-modal';\nimport {RecipeDetails} from \"./RecipeDetails\";\nimport {Ingredient} from \"./models/ingredient\";\nimport {Recipe as RecipeModel} from \"./models/Recipe\"\nimport {Glass} from \"./models/glass\";\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {AddGlassBar} from \"./AddGlassBar\";\n//uuid\n\nconst API_URL = 'http://localhost:3000';\n\nconst Recipe = () => {\n    const [recipes, setRecipes] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [openedRecipe, setOpenedRecipe] = useState(null);\n    const [name, setName] = useState(\"\");\n    const [process, setProcess] = useState(\"\");\n    const [ingredients, setIngredients] = useState([new Ingredient(\"\",null)]);\n    const [newRecipeModalIsOpen, setNewRecipeModalIsOpen] = React.useState(false);\n    const [recipeModalIsOpen, setRecipeModalIsOpen] = React.useState(false);\n    const [glassModalIsOpen, setGlassModalIsOpen] = React.useState(false);\n    const [glasses, setGlasses] = useState([]);\n    const [glassName, setGlassName] = useState(\"\")\n    const [volume, setVolume] = useState(\"\")\n    const [glassBar, setGlassBar] = useState(true);\n    console.log(glassBar);\n\n    recipes.sort((a,b) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0))\n\n    // RECIPE SOURCE//\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(`${API_URL}/recipes`)\n            .then((response) => response.json())\n            .then((data) => {\n                setRecipes(data);\n                setLoading(false);\n            });\n    }, []);\n\n    const addNewRecipe = () => {\n        const recipe = new RecipeModel( name, ingredients, process);\n        fetch(`${API_URL}/recipes`, {\n            method: 'POST',\n            body: JSON.stringify(recipe),\n            headers: {\n                'Content-type': 'application/json',\n            },\n        })\n            .then((resp) => resp.json())\n            .then((newRecipe) => {\n                recipe.setId(newRecipe.id)\n                setRecipes((prevState) => [...prevState, recipe]);\n            });\n    };\n    const deleteRecipe = (id) => {\n        setLoading(true);\n        fetch(`${API_URL}/recipes/${id}`, { method: 'DELETE' })\n            .then((response) => response.json())\n            .then(() => {\n                setRecipes((prevState) => prevState.filter((recipe) => recipe.id !== id));\n                setLoading(false);\n            });\n    };\n\n\n    // GLASS SOURCE//\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(`${API_URL}/glasses`)\n            .then((response) => response.json())\n            .then((data) => {\n                setGlasses(data);\n                setLoading(false);\n            });\n    }, []);\n\n\n    const addNewGlass = () => {\n        const glass = new Glass(glassName,volume);\n        fetch(`${API_URL}/glasses`, {\n            method: 'POST',\n            body: JSON.stringify(glass),\n            headers: {\n                'Content-type': 'application/json',\n            },\n        })\n            .then((resp) => resp.json())\n            .then((newGlass) => {\n                glass.setId(newGlass.id)\n                setGlasses((prevState) => [...prevState, glass]);\n            });\n    };\n\n\n    const deleteGlass = (id) => {\n        //setLoading(true);\n        fetch(`${API_URL}/glasses/${id}`, { method: 'DELETE' })\n            .then((response) => response.json())\n            .then(() => {\n                setGlasses((prevState) => prevState.filter((glass) => glass.id !== id));\n                setLoading(false);\n            });\n    };\n    const handleGlassDelete =(e, id)=>{\n        e.preventDefault()\n        deleteGlass(id)\n    }\n\n    const handleAddIng = (e) => {\n        e.preventDefault()\n        const ingredient = new Ingredient(\"\", null);\n        setIngredients( prevState => [...prevState, ingredient]);\n    }\n    function openNewModal() {\n        setNewRecipeModalIsOpen(true);\n    }\n\n    function closeNewModal(e) {\n        e.preventDefault()\n        if (name === \"\") return setNewRecipeModalIsOpen(true)\n        addNewRecipe();\n        setNewRecipeModalIsOpen(false);\n        setIngredients([new Ingredient(\"\",null)])\n        setName(\"\")\n    }\n\n    function openModal(recipe) {\n        setOpenedRecipe(recipe);\n        setRecipeModalIsOpen(true);\n    }\n    function closeModal() {\n        setRecipeModalIsOpen(false);\n    }\n    function openGlassModal(){\n        setGlassModalIsOpen(true)\n    }\n    function saveGlassModal(e){\n        e.preventDefault()\n        if (glassName === \"\" || volume===\"\") return setGlassModalIsOpen(true)\n        addNewGlass()\n        setGlassName(\"\")\n        setVolume(\"\")\n    }\n    function addGlassBar(e){\n        e.preventDefault()\n        setGlassBar(current => !current)\n    }\n\n    function cancelButton() {\n        setNewRecipeModalIsOpen(false);\n        setRecipeModalIsOpen(false);\n        setGlassModalIsOpen(false)\n        setIngredients([new Ingredient(\"\",null)])\n        setName(\"\")\n    }\n    const updateIngredientName = (index, newName) => {\n        const updatedIngredients = [...ingredients];\n        updatedIngredients[index].name=newName;\n        setIngredients(updatedIngredients)\n    }\n    const updateIngredientValue = (index, newQuantity) =>{\n        const updatedIngredients = [...ingredients];\n        updatedIngredients[index].quantity= newQuantity;\n        setIngredients(updatedIngredients);\n    }\n\n    if (loading) return <p>Trwa ładowanie...</p>;\n    return (\n        <>\n            <section className={\"container\"}>\n                <div className={'menu'}>\n                    <h1 className={\"app--name\"}>DRINKS CALCULATOR</h1>\n                    <div className={\"recipe\"} onClick={openNewModal}>\n                        <h2 className={\"add--section\"}>Add New</h2>\n                    </div>\n                    <div className={\"recipe\"} onClick={openGlassModal}>\n                        <h2 className={\"add--section\"}>Add New Glass</h2>\n\n\n                    </div>\n                    <h2 onClick={addGlassBar}>Add New Glass</h2>\n                    <AddGlassBar glassBar={glassBar}\n                                 setGlassName={setGlassName}\n                                 setVolume={setVolume}\n                                 saveGlassModal={saveGlassModal}\n                                 cancelButton={cancelButton}\n                                 glasses={glasses}\n                                 handleGlassDelete={handleGlassDelete}\n                    />\n                </div>\n\n                <div className={\"scroll\"}>\n                    <h2 className={\"app--recipes\"}>MY RECIPES</h2>\n                <div className={\"scroll-recipes\"}>\n                {recipes.map((recipe) => (\n                    <div key={recipe.id} className={\"recipe\"} onClick={ () => openModal(recipe)}>\n                        <h2>{recipe.name}</h2>\n                        <ul>\n                        {ingredients.map((ingredient)=>(\n                            <li>{ingredient.name}</li>\n                        ))}\n                        </ul>\n\n                        </div>\n                ))}\n                </div>\n\n                </div>\n                <Modal\n                    className={\"modal--open\"}\n                    isOpen={recipeModalIsOpen}\n                    onRequestClose={closeModal}\n                    ariaHideApp={false}\n                    portalClassName={\"modal\"}\n                >\n                    <RecipeDetails recipe={openedRecipe} glasses={glasses} open={recipeModalIsOpen} close={closeModal} deleteRecipe={deleteRecipe} cancel={cancelButton}/>\n                </Modal>\n                <Modal\n                    isOpen={glassModalIsOpen}\n                    onRequestClose={cancelButton}\n                    portalClassName={\"modal\"}\n                    ariaHideApp={false}\n                >\n                    <section className={\"container\"}>\n                        <form className={\"form\"}>\n                            <input className={\"new-recipe-title\"} placeholder={'Glass Name'} onChange={e => setGlassName(e.target.value)}/>\n                            <input className={\"new-glass-title\"} type={\"number\"} placeholder={'Volume in mililiters'} onChange={e => setVolume(e.target.value)}/>\n                            <button className={\"button\"} onClick={saveGlassModal}>Save</button>\n                            <button className={\"cancel--btn\"} onClick={cancelButton}>Close</button>\n                        </form>\n                        <h3 className={\"my--glasses\"}>MY GLASSES</h3>\n                        <ul className={\"glassList\"}>\n                            {glasses.map((glass,index) => (\n                                <li key={index} className={\"glassListItem\"}>\n                                    <button className={\"delete--glass\"}\n                                            onClick={ (e) => handleGlassDelete(e, glass.id)}>\n                                        Del\n                                    </button>\n                                    {glass.name} {glass.volume}.ml\n                                </li>\n                            ))}\n                        </ul>\n                    </section>\n                </Modal>\n                <Modal\n                    s\n                    isOpen={newRecipeModalIsOpen}\n                    onRequestClose={closeNewModal}\n                    ariaHideApp={false}\n                    portalClassName={\"modal\"}\n                >\n                    <section className={\"container\"}>\n                        <form className={\"form\"} onSubmit={closeNewModal}>\n                            <input className={\"new-recipe-title\"} placeholder={'Drink Name'} onChange={e => setName(e.target.value)}/>\n                            {ingredients.map((item,index)=>(\n                                <div key={index} className={'new-ing-div'}>\n                                    <input  className={\"new-recipe-ing\"}\n                                            placeholder={`ingredient ${index+1}`}\n                                            onChange={e => updateIngredientName(index,e.target.value)}\n                                            value={ingredients[index].name}\n                                    />\n                                    <input type={'number'} className={\"new-recipe-ing\"}\n                                           placeholder={\"quantity\"}\n                                           onChange={e => updateIngredientValue(index,e.target.value)}\n                                           value={ingredients[index].quantity}\n                                    />\n                                </div>\n                            ))}\n                            <button className={\"ing--button\"} onClick={handleAddIng}>Add ingredient</button>\n                            <textarea className={\"new-recipe-textarea\"} placeholder={\"Type Process\"} onChange={e => setProcess(e.target.value)}/>\n                            <button className={\"button\"} type={\"submit\"}>Save</button>\n                            <button className={\"cancel--btn\"} onClick={cancelButton}>Cancel</button>\n\n                        </form>\n                    </section>\n                </Modal>\n            </section>\n        </>\n    );\n}\n\nexport { Recipe };\n\n// check on click for recipe to prevent refreshiing",["82","83"],"/Users/blues/CodersLab/Projects/BoozeCounter/src/RecipeDetails.js",[],[],"/Users/blues/CodersLab/Projects/BoozeCounter/src/models/Recipe.js",[],[],"/Users/blues/CodersLab/Projects/BoozeCounter/src/models/ingredient.js",[],[],"/Users/blues/CodersLab/Projects/BoozeCounter/src/models/glass.js",[],[],"/Users/blues/CodersLab/Projects/BoozeCounter/src/AddGlassBar.js",["84"],[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"85","replacedBy":"89"},{"ruleId":"87","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":8,"column":9,"nodeType":"93","messageId":"94","endLine":8,"endColumn":24},{"ruleId":"85","replacedBy":"95"},{"ruleId":"87","replacedBy":"96"},{"ruleId":"91","severity":1,"message":"97","line":1,"column":16,"nodeType":"93","messageId":"94","endLine":1,"endColumn":24},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],["98"],["99"],"no-unused-vars","'FontAwesomeIcon' is defined but never used.","Identifier","unusedVar",["98"],["99"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]